challenge1:

Each challenge is designed to help introduce you to a new piece of cryptography. Solving a challenge will require you to find a "flag" These flags will usually be in the format crypto{y0ur_f1rst_fl4g}. The flag format helps you verify that you found the correct sol
ution.

our flag this time is : crypto{y0ur_f1rst_fl4g}

challenge2:great snakes

Modern cryptography involves code, and code involves coding. CryptoHack provides a good opportunity to sharpen your skills.

Of all modern programming languages, Python 3 stands out as ideal for quickly writing cryptographic scripts and attacks. For more information about why we think Python is so great for this, please see the FAQ.

Run the attached Python script and it will output your flag.


solution: running the script on python3, syntax: python3 great_snakes.py     

our flag this time is :crypto{z3n_0f_pyth0n}


challenge3: ASCII code:

ASCII is a 7-bit encoding standard which allows the representation of text using the integers 0-127.

Using the below integer array, convert the numbers to their corresponding ASCII characters to obtain a flag.
In Python, the chr() function can be used to convert an ASCII ordinal number to a character (the ord() function does the opposite)


solution: writing a python code to convert integer array to ASCII:
A=[99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125] #array declaration
chars = []  #an array of all the characters decoded from decimal to ASCII
for char in A:
    chars.append(chr(char))# .append() fct adds the element to the list. frist we decode it to characters then we append it

charss = "".join(chars) # this is to join all elemnts of the array without any spaces(array of characters to string)
print(charss)

our flag this time is :crypto{ASCII_pr1nt4bl3}


challenge 4: Hex:

When we encrypt something the resulting ciphertext commonly has bytes which are not printable ASCII characters. If we want to share our encrypted data, it's common to encode it into something more user-friendly and portable across different systems.

Hexadecimal can be used in such a way to represent ASCII strings. First each letter is converted to an ordinal number according to the ASCII table (as in the previous challenge). Then the decimal numbers are converted to base-16 numbers, otherwise known as hexadecimal. The numbers can be combined together, into one long hex string.

ASCII code-->decimal-->hexadecimal
 below is a flag encoded as a hex string. Decode this back into bytes to get the flag

In Python, the bytes.fromhex() function can be used to convert hex to bytes. The .hex() instance method can be called on byte strings to get the hex representation.

difference between bytes_string and normal string:
            s = "hello"
            b = s.encode()  # b'hello'

            #from bytes to string:
            s2 = b.decode()  # "hello"
            

solution is written in dec.py

our flag this time is : crypto{You_will_be_working_with_hex_strings_a_lot}
If you just print() a bytes object in Python and it’s readable, Python shows it nicely. But it's still bytes under the hood, not a string.
If you want to treat it as real text (e.g., concatenate with other strings, save to a file, send over a network), you must decode it:

python
Copy code
text = bytes.fromhex(hex_string).decode('utf-8')

challenge 5: base64:
Base64 is a way to encode binary data (like images, files, or any bytes) into a string that only uses printable ASCII characters.
Binary--> Decimal-(base 64 table)->ASCII
It’s called “Base64” because it uses 64 characters:A-Z (26) + a-z (26) + 0-9 (10) + + and /→ total = 64 characters

Take the below hex string, decode it into bytes and then encode it into Base64.:
72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf

 In Python, after importing the base64 module with import base64, you can use the base64.b64encode() function. Remember to decode the hex first as the challenge description states.

our flag this time is : cryptoBase+64+Encoding+is+Web+Safe/

 challenge6:XOR starter:
For longer binary numbers we XOR bit by bit: 0110 ^ 1010 = 1100. We can XOR integers by first converting the integer from decimal to binary. We can XOR strings by first converting each character to the integer representing the Unicode character.

Given the string label, XOR each character with the integer 13. Convert these integers back to a string and submit the flag as crypto{new_string}

13 in binary is bin(13)
You have:

Plaintext: 1 0 1 0 1 0 1

Key: 0 1 (just two bits)

So what do you do? Repeat the key to match the length of the plaintext.

➡️ Repeat 01 to match 7 bits:

makefile
Copy code
Plaintext:  1 0 1 0 1 0 1
Key:        0 1 0 1 0 1 0

challege 7: XOR Properties:
bitwise XOR operator Works only on integers
In the last challenge, you saw how XOR worked at the level of bits. In this one, we're going to cover the properties of the XOR operation and then use them to undo a chain of operations that have encrypted a flag. Gaining an intuition for how this works will help greatly when you come to attacking real cryptosystems later, especially in the block ciphers category.

There are four main properties we should consider when we solve challenges using the XOR operator

Commutative: A ⊕ B = B ⊕ A  : 
Associative: A ⊕ (B ⊕ C) = (A ⊕ B) ⊕ C: 
Identity: A ⊕ 0 = A
Self-Inverse: A ⊕ A = 0

Let's break this down. Commutative means that the order of the XOR operations is not important. Associative means that a chain of operations can be carried out without order (we do not need to worry about brackets). The identity is 0, so XOR with 0 "does nothing", and lastly something XOR'd with itself returns zero.

Let's put this into practice! Below is a series of outputs where three random keys have been XOR'd together and with the flag. Use the above properties to undo the encryption in the final line to obtain the flag.

KEY1 = a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313
KEY2 ^ KEY1 = 37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e
KEY2 ^ KEY3 = c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1
FLAG ^ KEY1 ^ KEY3 ^ KEY2 = 04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf

basically flag^key1^key2^key3= something
if we do: something^key1^key2^key3 we get flag^key1^key2^key3^key1^key2^key3 which means flag cause A^A=0 and B^0=B

so we have to XOR the something with KEY1 and KEY2 and KEY3
we have key1 and we have key2^key3 we need to XOR them:
KEY2 ^ KEY3 = c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1
KEY1 = a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313

